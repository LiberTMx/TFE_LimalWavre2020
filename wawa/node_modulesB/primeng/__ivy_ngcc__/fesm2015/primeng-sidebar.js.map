{"version":3,"sources":["C:/wamp64/www/wawaMax/node_modules/primeng/fesm2015/primeng-sidebar.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;eAwJE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uCA0DqC,AA6B3B;;;;EAEV;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0BAOgB","file":"primeng-sidebar.js","sourcesContent":["import { EventEmitter, ElementRef, Renderer2, Input, ViewChild, Output, Component, NgModule } from '@angular/core';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { CommonModule } from '@angular/common';\nimport { DomHandler } from 'primeng/dom';\n\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nlet Sidebar = class Sidebar {\n    constructor(el, renderer) {\n        this.el = el;\n        this.renderer = renderer;\n        this.position = 'left';\n        this.blockScroll = false;\n        this.autoZIndex = true;\n        this.baseZIndex = 0;\n        this.modal = true;\n        this.dismissible = true;\n        this.showCloseIcon = true;\n        this.closeOnEscape = true;\n        this.onShow = new EventEmitter();\n        this.onHide = new EventEmitter();\n        this.visibleChange = new EventEmitter();\n    }\n    ngAfterViewInit() {\n        this.initialized = true;\n        if (this.appendTo) {\n            if (this.appendTo === 'body')\n                document.body.appendChild(this.containerViewChild.nativeElement);\n            else\n                DomHandler.appendChild(this.containerViewChild.nativeElement, this.appendTo);\n        }\n        if (this.visible) {\n            this.show();\n        }\n    }\n    get visible() {\n        return this._visible;\n    }\n    set visible(val) {\n        this._visible = val;\n        if (this.initialized && this.containerViewChild && this.containerViewChild.nativeElement) {\n            if (this._visible)\n                this.show();\n            else {\n                if (this.preventVisibleChangePropagation)\n                    this.preventVisibleChangePropagation = false;\n                else\n                    this.hide();\n            }\n        }\n    }\n    ngAfterViewChecked() {\n        if (this.executePostDisplayActions) {\n            this.onShow.emit({});\n            this.executePostDisplayActions = false;\n        }\n    }\n    show() {\n        this.executePostDisplayActions = true;\n        if (this.autoZIndex) {\n            this.containerViewChild.nativeElement.style.zIndex = String(this.baseZIndex + (++DomHandler.zindex));\n        }\n        if (this.modal) {\n            this.enableModality();\n        }\n    }\n    hide() {\n        this.onHide.emit({});\n        if (this.modal) {\n            this.disableModality();\n        }\n    }\n    close(event) {\n        this.preventVisibleChangePropagation = true;\n        this.hide();\n        this.visibleChange.emit(false);\n        event.preventDefault();\n    }\n    enableModality() {\n        if (!this.mask) {\n            this.mask = document.createElement('div');\n            this.mask.style.zIndex = String(parseInt(this.containerViewChild.nativeElement.style.zIndex) - 1);\n            DomHandler.addMultipleClasses(this.mask, 'ui-widget-overlay ui-sidebar-mask');\n            if (this.dismissible) {\n                this.maskClickListener = this.renderer.listen(this.mask, 'click', (event) => {\n                    if (this.dismissible) {\n                        this.close(event);\n                    }\n                });\n            }\n            document.body.appendChild(this.mask);\n            if (this.blockScroll) {\n                DomHandler.addClass(document.body, 'ui-overflow-hidden');\n            }\n        }\n    }\n    disableModality() {\n        if (this.mask) {\n            this.unbindMaskClickListener();\n            document.body.removeChild(this.mask);\n            if (this.blockScroll) {\n                DomHandler.removeClass(document.body, 'ui-overflow-hidden');\n            }\n            this.mask = null;\n        }\n    }\n    onAnimationStart(event) {\n        switch (event.toState) {\n            case 'visible':\n                if (this.closeOnEscape) {\n                    this.bindDocumentEscapeListener();\n                }\n                break;\n            case 'hidden':\n                this.unbindGlobalListeners();\n                break;\n        }\n    }\n    bindDocumentEscapeListener() {\n        this.documentEscapeListener = this.renderer.listen('document', 'keydown', (event) => {\n            if (event.which == 27) {\n                if (parseInt(this.containerViewChild.nativeElement.style.zIndex) === (DomHandler.zindex + this.baseZIndex)) {\n                    this.close(event);\n                }\n            }\n        });\n    }\n    unbindDocumentEscapeListener() {\n        if (this.documentEscapeListener) {\n            this.documentEscapeListener();\n            this.documentEscapeListener = null;\n        }\n    }\n    unbindMaskClickListener() {\n        if (this.maskClickListener) {\n            this.maskClickListener();\n            this.maskClickListener = null;\n        }\n    }\n    unbindGlobalListeners() {\n        this.unbindMaskClickListener();\n        this.unbindDocumentEscapeListener();\n    }\n    ngOnDestroy() {\n        this.initialized = false;\n        if (this.visible) {\n            this.hide();\n        }\n        if (this.appendTo) {\n            this.el.nativeElement.appendChild(this.containerViewChild.nativeElement);\n        }\n        this.unbindGlobalListeners();\n    }\n};\nSidebar.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Renderer2 }\n];\n__decorate([\n    Input()\n], Sidebar.prototype, \"position\", void 0);\n__decorate([\n    Input()\n], Sidebar.prototype, \"fullScreen\", void 0);\n__decorate([\n    Input()\n], Sidebar.prototype, \"appendTo\", void 0);\n__decorate([\n    Input()\n], Sidebar.prototype, \"blockScroll\", void 0);\n__decorate([\n    Input()\n], Sidebar.prototype, \"style\", void 0);\n__decorate([\n    Input()\n], Sidebar.prototype, \"styleClass\", void 0);\n__decorate([\n    Input()\n], Sidebar.prototype, \"ariaCloseLabel\", void 0);\n__decorate([\n    Input()\n], Sidebar.prototype, \"autoZIndex\", void 0);\n__decorate([\n    Input()\n], Sidebar.prototype, \"baseZIndex\", void 0);\n__decorate([\n    Input()\n], Sidebar.prototype, \"modal\", void 0);\n__decorate([\n    Input()\n], Sidebar.prototype, \"dismissible\", void 0);\n__decorate([\n    Input()\n], Sidebar.prototype, \"showCloseIcon\", void 0);\n__decorate([\n    Input()\n], Sidebar.prototype, \"closeOnEscape\", void 0);\n__decorate([\n    ViewChild('container', { static: true })\n], Sidebar.prototype, \"containerViewChild\", void 0);\n__decorate([\n    Output()\n], Sidebar.prototype, \"onShow\", void 0);\n__decorate([\n    Output()\n], Sidebar.prototype, \"onHide\", void 0);\n__decorate([\n    Output()\n], Sidebar.prototype, \"visibleChange\", void 0);\n__decorate([\n    Input()\n], Sidebar.prototype, \"visible\", null);\nSidebar = __decorate([\n    Component({\n        selector: 'p-sidebar',\n        template: `\n        <div #container [ngClass]=\"{'ui-sidebar ui-widget ui-widget-content ui-shadow':true, 'ui-sidebar-active': visible, \n            'ui-sidebar-left': (position === 'left'), 'ui-sidebar-right': (position === 'right'),\n            'ui-sidebar-top': (position === 'top'), 'ui-sidebar-bottom': (position === 'bottom'), \n            'ui-sidebar-full': fullScreen}\"\n            [@panelState]=\"visible ? 'visible' : 'hidden'\" (@panelState.start)=\"onAnimationStart($event)\" [ngStyle]=\"style\" [class]=\"styleClass\"  role=\"complementary\" [attr.aria-modal]=\"modal\">\n            <a [ngClass]=\"{'ui-sidebar-close ui-corner-all':true}\" *ngIf=\"showCloseIcon\" tabindex=\"0\" role=\"button\" (click)=\"close($event)\" (keydown.enter)=\"close($event)\" [attr.aria-label]=\"ariaCloseLabel\">\n                <span class=\"pi pi-times\"></span>\n            </a>\n            <ng-content></ng-content>\n        </div>\n    `,\n        animations: [\n            trigger('panelState', [\n                state('hidden', style({\n                    opacity: 0\n                })),\n                state('visible', style({\n                    opacity: 1\n                })),\n                transition('visible => hidden', animate('300ms ease-in')),\n                transition('hidden => visible', animate('300ms ease-out'))\n            ])\n        ]\n    })\n], Sidebar);\nlet SidebarModule = class SidebarModule {\n};\nSidebarModule = __decorate([\n    NgModule({\n        imports: [CommonModule],\n        exports: [Sidebar],\n        declarations: [Sidebar]\n    })\n], SidebarModule);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Sidebar, SidebarModule };\n"]}