{"version":3,"sources":["C:/wamp64/www/wawaMax/node_modules/angular-password-strength-meter/fesm2015/angular-password-strength-meter.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA+BC,mJAGC;;;;;gDAEqD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAmFtD,41CAQC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAWA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAuCD;;;;;;;;;0BAOC","file":"angular-password-strength-meter.js","sourcesContent":["import { Injectable, EventEmitter, Component, Input, Output, NgModule } from '@angular/core';\nimport * as zxcvbn_ from 'zxcvbn';\nimport { CommonModule } from '@angular/common';\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/password-strength-meter.service.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/** @type {?} */\r\nconst zxcvbn = zxcvbn_;\r\nclass PasswordStrengthMeterService {\r\n    constructor() { }\r\n    /**\r\n     *  this will return the password strength score in number\r\n     *  0 - too guessable\r\n     *  1 - very guessable\r\n     *  2 - somewhat guessable\r\n     *  3 - safely unguessable\r\n     *  4 - very unguessable\r\n     *\r\n     * @param {?} password - Password\r\n     * @return {?}\r\n     */\r\n    score(password) {\r\n        /** @type {?} */\r\n        const result = zxcvbn(password);\r\n        return result.score;\r\n    }\r\n    /**\r\n     * this will return the password strength score with feedback messages\r\n     * return type { score: number; feedback: { suggestions: string[]; warning: string } }\r\n     *\r\n     * @param {?} password - Password\r\n     * @return {?}\r\n     */\r\n    scoreWithFeedback(password) {\r\n        /** @type {?} */\r\n        const result = zxcvbn(password);\r\n        return { score: result.score, feedback: result.feedback };\r\n    }\r\n}\r\nPasswordStrengthMeterService.decorators = [\r\n    { type: Injectable }\r\n];\r\n/** @nocollapse */\r\nPasswordStrengthMeterService.ctorParameters = () => [];\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/password-strength-meter.component.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass PasswordStrengthMeterComponent {\r\n    /**\r\n     * @param {?} passwordStrengthMeterService\r\n     */\r\n    constructor(passwordStrengthMeterService) {\r\n        this.passwordStrengthMeterService = passwordStrengthMeterService;\r\n        this.minPasswordLength = 8;\r\n        this.enableFeedback = false;\r\n        this.colors = [];\r\n        this.strengthChange = new EventEmitter();\r\n        this.passwordStrength = null;\r\n        this.feedback = null;\r\n        this.prevPasswordStrength = null;\r\n        this.defaultColours = [\r\n            'darkred',\r\n            'orangered',\r\n            'orange',\r\n            'yellowgreen',\r\n            'green'\r\n        ];\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnInit() { }\r\n    /**\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\r\n    ngOnChanges(changes) {\r\n        if (changes.password) {\r\n            this.calculatePasswordStrength();\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    calculatePasswordStrength() {\r\n        // TODO validation logic optimization\r\n        if (!this.password) {\r\n            this.passwordStrength = null;\r\n        }\r\n        else if (this.password && this.password.length < this.minPasswordLength) {\r\n            this.passwordStrength = 0;\r\n        }\r\n        else {\r\n            if (this.enableFeedback) {\r\n                /** @type {?} */\r\n                const result = this.passwordStrengthMeterService.scoreWithFeedback(this.password);\r\n                this.passwordStrength = result.score;\r\n                this.feedback = result.feedback;\r\n            }\r\n            else {\r\n                this.passwordStrength = this.passwordStrengthMeterService.score(this.password);\r\n                this.feedback = null;\r\n            }\r\n        }\r\n        // Only emit the passwordStrength if it changed\r\n        if (this.prevPasswordStrength !== this.passwordStrength) {\r\n            this.strengthChange.emit(this.passwordStrength);\r\n            this.prevPasswordStrength = this.passwordStrength;\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} strength\r\n     * @return {?}\r\n     */\r\n    getMeterFillColor(strength) {\r\n        if (!strength || strength < 0 || strength > 5) {\r\n            return this.colors[0] ? this.colors[0] : this.defaultColours[0];\r\n        }\r\n        return this.colors[strength]\r\n            ? this.colors[strength]\r\n            : this.defaultColours[strength];\r\n    }\r\n}\r\nPasswordStrengthMeterComponent.decorators = [\r\n    { type: Component, args: [{\r\n                selector: 'password-strength-meter',\r\n                template: \"<div>\\r\\n  <div class=\\\"strength-meter\\\">\\r\\n    <div class=\\\"strength-meter-fill\\\" [style.background]=\\\"getMeterFillColor(passwordStrength)\\\" [attr.data-strength]=\\\"passwordStrength\\\"></div>\\r\\n  </div>\\r\\n  <ng-container *ngIf=\\\"enableFeedback && feedback\\\">\\r\\n    <small class=\\\"password-feedback\\\" *ngIf=\\\"feedback.warning\\\">\\r\\n      {{feedback.warning}}\\r\\n    </small>\\r\\n    <small class=\\\"password-suggetion\\\" *ngIf=\\\"feedback.suggestions && feedback.suggestions.length > 0\\\">\\r\\n      <ng-container *ngFor=\\\"let suggetion of feedback.suggestions\\\">{{suggetion}}</ng-container>\\r\\n    </small>\\r\\n  </ng-container>\\r\\n</div>\\r\\n\",\r\n                providers: [PasswordStrengthMeterService],\r\n                styles: [\".strength-meter{position:relative;height:3px;background:#ddd;margin:10px auto;border-radius:3px}.strength-meter:after,.strength-meter:before{content:\\\"\\\";height:inherit;background:0 0;display:block;border-color:#fff;border-style:solid;border-width:0 5px;position:absolute;width:calc(((100% - 20px)/ 5) + 10px);z-index:10}.strength-meter:before{left:calc((100% - 20px)/ 5)}.strength-meter:after{right:calc((100% - 20px)/ 5)}.strength-meter-fill{background:0 0;height:inherit;position:absolute;width:0;border-radius:inherit;transition:width .5s ease-in-out,background .25s}.strength-meter-fill[data-strength=\\\"0\\\"]{background:#8b0000;width:20%}.strength-meter-fill[data-strength=\\\"1\\\"]{background:#ff4500;width:40%}.strength-meter-fill[data-strength=\\\"2\\\"]{background:orange;width:60%}.strength-meter-fill[data-strength=\\\"3\\\"]{background:#9acd32;width:80%}.strength-meter-fill[data-strength=\\\"4\\\"]{background:green;width:100%}.password-feedback,.password-suggetion{font-size:70%;font-weight:400;color:#6c757d!important;display:inline-block;margin-top:.25rem}\"]\r\n            }] }\r\n];\r\n/** @nocollapse */\r\nPasswordStrengthMeterComponent.ctorParameters = () => [\r\n    { type: PasswordStrengthMeterService }\r\n];\r\nPasswordStrengthMeterComponent.propDecorators = {\r\n    password: [{ type: Input }],\r\n    minPasswordLength: [{ type: Input }],\r\n    enableFeedback: [{ type: Input }],\r\n    colors: [{ type: Input }],\r\n    strengthChange: [{ type: Output }]\r\n};\r\nif (false) {\r\n    /** @type {?} */\r\n    PasswordStrengthMeterComponent.prototype.password;\r\n    /** @type {?} */\r\n    PasswordStrengthMeterComponent.prototype.minPasswordLength;\r\n    /** @type {?} */\r\n    PasswordStrengthMeterComponent.prototype.enableFeedback;\r\n    /** @type {?} */\r\n    PasswordStrengthMeterComponent.prototype.colors;\r\n    /** @type {?} */\r\n    PasswordStrengthMeterComponent.prototype.strengthChange;\r\n    /** @type {?} */\r\n    PasswordStrengthMeterComponent.prototype.passwordStrength;\r\n    /** @type {?} */\r\n    PasswordStrengthMeterComponent.prototype.feedback;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    PasswordStrengthMeterComponent.prototype.prevPasswordStrength;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    PasswordStrengthMeterComponent.prototype.defaultColours;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    PasswordStrengthMeterComponent.prototype.passwordStrengthMeterService;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/password-strength-meter.module.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass PasswordStrengthMeterModule {\r\n}\r\nPasswordStrengthMeterModule.decorators = [\r\n    { type: NgModule, args: [{\r\n                imports: [CommonModule],\r\n                declarations: [PasswordStrengthMeterComponent],\r\n                exports: [PasswordStrengthMeterComponent]\r\n            },] }\r\n];\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: public-api.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: angular-password-strength-meter.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\nexport { PasswordStrengthMeterComponent, PasswordStrengthMeterModule, PasswordStrengthMeterService };\n"]}