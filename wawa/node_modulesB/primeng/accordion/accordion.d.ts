import { ElementRef, AfterContentInit, OnDestroy, EventEmitter, QueryList, ChangeDetectorRef, TemplateRef } from '@angular/core';
import { Header } from 'primeng/api';
import { BlockableUI } from 'primeng/api';
import { Subscription } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from 'primeng/api';
export declare class AccordionTab implements OnDestroy {
    changeDetector: ChangeDetectorRef;
    header: string;
    selected: boolean;
    disabled: boolean;
    cache: boolean;
    selectedChange: EventEmitter<any>;
    transitionOptions: string;
    headerFacet: QueryList<Header>;
    templates: QueryList<any>;
    private _animating;
    animating: boolean;
    contentTemplate: TemplateRef<any>;
    id: string;
    loaded: boolean;
    accordion: Accordion;
    constructor(accordion: any, changeDetector: ChangeDetectorRef);
    ngAfterContentInit(): void;
    toggle(event: any): boolean;
    findTabIndex(): number;
    readonly hasHeaderFacet: boolean;
    onToggleDone(event: Event): void;
    onKeydown(event: KeyboardEvent): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AccordionTab>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<AccordionTab, "p-accordionTab", never, {
    "cache": "cache";
    "transitionOptions": "transitionOptions";
    "selected": "selected";
    "header": "header";
    "disabled": "disabled";
}, {
    "selectedChange": "selectedChange";
}, ["headerFacet", "templates"]>;
}
export declare class Accordion implements BlockableUI, AfterContentInit, OnDestroy {
    el: ElementRef;
    changeDetector: ChangeDetectorRef;
    multiple: boolean;
    onClose: EventEmitter<any>;
    onOpen: EventEmitter<any>;
    style: any;
    styleClass: string;
    expandIcon: string;
    collapseIcon: string;
    tabList: QueryList<AccordionTab>;
    tabListSubscription: Subscription;
    private _activeIndex;
    tabs: AccordionTab[];
    constructor(el: ElementRef, changeDetector: ChangeDetectorRef);
    ngAfterContentInit(): void;
    initTabs(): any;
    getBlockableElement(): HTMLElement;
    activeIndex: any;
    updateSelectionState(): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<Accordion>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<Accordion, "p-accordion", never, {
    "expandIcon": "expandIcon";
    "collapseIcon": "collapseIcon";
    "activeIndex": "activeIndex";
    "multiple": "multiple";
    "style": "style";
    "styleClass": "styleClass";
}, {
    "onClose": "onClose";
    "onOpen": "onOpen";
}, ["tabList"]>;
}
export declare class AccordionModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<AccordionModule, [typeof Accordion, typeof AccordionTab], [typeof ɵngcc1.CommonModule], [typeof Accordion, typeof AccordionTab, typeof ɵngcc2.SharedModule]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<AccordionModule>;
}

//# sourceMappingURL=accordion.d.ts.map