{"version":3,"sources":["C:/wamp64/www/wawaMax/node_modules/primeng/fesm2015/primeng-confirmdialog.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;eA2LE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;wDAoFsD,AA4CtC;;;;;EAEhB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0BAOsB","file":"primeng-confirmdialog.js","sourcesContent":["import { EventEmitter, ElementRef, Renderer2, NgZone, Input, ContentChild, ViewChild, Component, NgModule } from '@angular/core';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { CommonModule } from '@angular/common';\nimport { DomHandler } from 'primeng/dom';\nimport { ConfirmationService, Footer, SharedModule } from 'primeng/api';\nimport { ButtonModule } from 'primeng/button';\n\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nlet ConfirmDialog = class ConfirmDialog {\n    constructor(el, renderer, confirmationService, zone) {\n        this.el = el;\n        this.renderer = renderer;\n        this.confirmationService = confirmationService;\n        this.zone = zone;\n        this.acceptIcon = 'pi pi-check';\n        this.acceptLabel = 'Yes';\n        this.acceptVisible = true;\n        this.rejectIcon = 'pi pi-times';\n        this.rejectLabel = 'No';\n        this.rejectVisible = true;\n        this.closeOnEscape = true;\n        this.blockScroll = true;\n        this.closable = true;\n        this.autoZIndex = true;\n        this.baseZIndex = 0;\n        this.transitionOptions = '150ms cubic-bezier(0, 0, 0.2, 1)';\n        this.focusTrap = true;\n        this.subscription = this.confirmationService.requireConfirmation$.subscribe(confirmation => {\n            if (confirmation.key === this.key) {\n                this.confirmation = confirmation;\n                this.message = this.confirmation.message || this.message;\n                this.icon = this.confirmation.icon || this.icon;\n                this.header = this.confirmation.header || this.header;\n                this.rejectVisible = this.confirmation.rejectVisible == null ? this.rejectVisible : this.confirmation.rejectVisible;\n                this.acceptVisible = this.confirmation.acceptVisible == null ? this.acceptVisible : this.confirmation.acceptVisible;\n                this.acceptLabel = this.confirmation.acceptLabel || this.acceptLabel;\n                this.rejectLabel = this.confirmation.rejectLabel || this.rejectLabel;\n                if (this.confirmation.accept) {\n                    this.confirmation.acceptEvent = new EventEmitter();\n                    this.confirmation.acceptEvent.subscribe(this.confirmation.accept);\n                }\n                if (this.confirmation.reject) {\n                    this.confirmation.rejectEvent = new EventEmitter();\n                    this.confirmation.rejectEvent.subscribe(this.confirmation.reject);\n                }\n                if (this.confirmation.blockScroll === false || this.confirmation.blockScroll === true) {\n                    this.blockScroll = this.confirmation.blockScroll;\n                }\n                this.visible = true;\n            }\n        });\n    }\n    get visible() {\n        return this._visible;\n    }\n    set visible(value) {\n        this._visible = value;\n        if (this._visible && !this.maskVisible) {\n            this.maskVisible = true;\n        }\n    }\n    onAnimationStart(event) {\n        switch (event.toState) {\n            case 'visible':\n                this.container = event.element;\n                this.wrapper = this.container.parentElement;\n                this.contentContainer = DomHandler.findSingle(this.container, '.ui-dialog-content');\n                if (this.acceptVisible || this.rejectVisible) {\n                    DomHandler.findSingle(this.container, 'button').focus();\n                }\n                this.appendContainer();\n                this.moveOnTop();\n                this.bindGlobalListeners();\n                this.enableModality();\n                break;\n        }\n    }\n    onAnimationEnd(event) {\n        switch (event.toState) {\n            case 'void':\n                this.onOverlayHide();\n                break;\n        }\n    }\n    appendContainer() {\n        if (this.appendTo) {\n            if (this.appendTo === 'body')\n                document.body.appendChild(this.container);\n            else\n                DomHandler.appendChild(this.container, this.appendTo);\n        }\n    }\n    restoreAppend() {\n        if (this.container && this.appendTo) {\n            this.el.nativeElement.appendChild(this.container);\n        }\n    }\n    enableModality() {\n        if (this.blockScroll) {\n            DomHandler.addClass(document.body, 'ui-overflow-hidden');\n        }\n    }\n    disableModality() {\n        this.maskVisible = false;\n        if (this.blockScroll) {\n            DomHandler.removeClass(document.body, 'ui-overflow-hidden');\n        }\n    }\n    close(event) {\n        if (this.confirmation.rejectEvent) {\n            this.confirmation.rejectEvent.emit();\n        }\n        this.hide();\n        event.preventDefault();\n    }\n    hide() {\n        this.visible = false;\n    }\n    moveOnTop() {\n        if (this.autoZIndex) {\n            this.container.style.zIndex = String(this.baseZIndex + (++DomHandler.zindex));\n            this.wrapper.style.zIndex = String(this.baseZIndex + (DomHandler.zindex - 1));\n        }\n    }\n    bindGlobalListeners() {\n        if ((this.closeOnEscape && this.closable) || this.focusTrap && !this.documentEscapeListener) {\n            this.documentEscapeListener = this.renderer.listen('document', 'keydown', (event) => {\n                if (event.which == 27 && (this.closeOnEscape && this.closable)) {\n                    if (parseInt(this.container.style.zIndex) === (DomHandler.zindex + this.baseZIndex) && this.visible) {\n                        this.close(event);\n                    }\n                }\n                if (event.which === 9 && this.focusTrap) {\n                    event.preventDefault();\n                    let focusableElements = DomHandler.getFocusableElements(this.container);\n                    if (focusableElements && focusableElements.length > 0) {\n                        if (!document.activeElement) {\n                            focusableElements[0].focus();\n                        }\n                        else {\n                            let focusedIndex = focusableElements.indexOf(document.activeElement);\n                            if (event.shiftKey) {\n                                if (focusedIndex == -1 || focusedIndex === 0)\n                                    focusableElements[focusableElements.length - 1].focus();\n                                else\n                                    focusableElements[focusedIndex - 1].focus();\n                            }\n                            else {\n                                if (focusedIndex == -1 || focusedIndex === (focusableElements.length - 1))\n                                    focusableElements[0].focus();\n                                else\n                                    focusableElements[focusedIndex + 1].focus();\n                            }\n                        }\n                    }\n                }\n            });\n        }\n    }\n    unbindGlobalListeners() {\n        if (this.documentEscapeListener) {\n            this.documentEscapeListener();\n            this.documentEscapeListener = null;\n        }\n    }\n    onOverlayHide() {\n        this.disableModality();\n        this.unbindGlobalListeners();\n        this.container = null;\n    }\n    ngOnDestroy() {\n        this.restoreAppend();\n        this.onOverlayHide();\n        this.subscription.unsubscribe();\n    }\n    accept() {\n        if (this.confirmation.acceptEvent) {\n            this.confirmation.acceptEvent.emit();\n        }\n        this.hide();\n        this.confirmation = null;\n    }\n    reject() {\n        if (this.confirmation.rejectEvent) {\n            this.confirmation.rejectEvent.emit();\n        }\n        this.hide();\n        this.confirmation = null;\n    }\n};\nConfirmDialog.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Renderer2 },\n    { type: ConfirmationService },\n    { type: NgZone }\n];\n__decorate([\n    Input()\n], ConfirmDialog.prototype, \"header\", void 0);\n__decorate([\n    Input()\n], ConfirmDialog.prototype, \"icon\", void 0);\n__decorate([\n    Input()\n], ConfirmDialog.prototype, \"message\", void 0);\n__decorate([\n    Input()\n], ConfirmDialog.prototype, \"style\", void 0);\n__decorate([\n    Input()\n], ConfirmDialog.prototype, \"styleClass\", void 0);\n__decorate([\n    Input()\n], ConfirmDialog.prototype, \"acceptIcon\", void 0);\n__decorate([\n    Input()\n], ConfirmDialog.prototype, \"acceptLabel\", void 0);\n__decorate([\n    Input()\n], ConfirmDialog.prototype, \"acceptVisible\", void 0);\n__decorate([\n    Input()\n], ConfirmDialog.prototype, \"rejectIcon\", void 0);\n__decorate([\n    Input()\n], ConfirmDialog.prototype, \"rejectLabel\", void 0);\n__decorate([\n    Input()\n], ConfirmDialog.prototype, \"rejectVisible\", void 0);\n__decorate([\n    Input()\n], ConfirmDialog.prototype, \"acceptButtonStyleClass\", void 0);\n__decorate([\n    Input()\n], ConfirmDialog.prototype, \"rejectButtonStyleClass\", void 0);\n__decorate([\n    Input()\n], ConfirmDialog.prototype, \"closeOnEscape\", void 0);\n__decorate([\n    Input()\n], ConfirmDialog.prototype, \"blockScroll\", void 0);\n__decorate([\n    Input()\n], ConfirmDialog.prototype, \"rtl\", void 0);\n__decorate([\n    Input()\n], ConfirmDialog.prototype, \"closable\", void 0);\n__decorate([\n    Input()\n], ConfirmDialog.prototype, \"appendTo\", void 0);\n__decorate([\n    Input()\n], ConfirmDialog.prototype, \"key\", void 0);\n__decorate([\n    Input()\n], ConfirmDialog.prototype, \"autoZIndex\", void 0);\n__decorate([\n    Input()\n], ConfirmDialog.prototype, \"baseZIndex\", void 0);\n__decorate([\n    Input()\n], ConfirmDialog.prototype, \"transitionOptions\", void 0);\n__decorate([\n    Input()\n], ConfirmDialog.prototype, \"focusTrap\", void 0);\n__decorate([\n    Input()\n], ConfirmDialog.prototype, \"visible\", null);\n__decorate([\n    ContentChild(Footer, { static: true })\n], ConfirmDialog.prototype, \"footer\", void 0);\n__decorate([\n    ViewChild('content', { static: true })\n], ConfirmDialog.prototype, \"contentViewChild\", void 0);\nConfirmDialog = __decorate([\n    Component({\n        selector: 'p-confirmDialog',\n        template: `\n        <div class=\"ui-dialog-wrapper\" [ngClass]=\"{'ui-widget-overlay ui-dialog-mask': true, 'ui-dialog-mask-scrollblocker':blockScroll}\" *ngIf=\"maskVisible\">\n            <div [ngClass]=\"{'ui-dialog ui-confirmdialog ui-widget ui-widget-content ui-corner-all ui-shadow':true,'ui-dialog-rtl':rtl}\" [ngStyle]=\"style\" [class]=\"styleClass\" (mousedown)=\"moveOnTop()\"\n                [@animation]=\"{value: 'visible', params: {transitionParams: transitionOptions}}\" (@animation.start)=\"onAnimationStart($event)\" (@animation.done)=\"onAnimationEnd($event)\" *ngIf=\"visible\">\n                <div class=\"ui-dialog-titlebar ui-widget-header ui-helper-clearfix ui-corner-top\">\n                    <span class=\"ui-dialog-title\" *ngIf=\"header\">{{header}}</span>\n                    <div class=\"ui-dialog-titlebar-icons\">\n                        <a *ngIf=\"closable\" [ngClass]=\"{'ui-dialog-titlebar-icon ui-dialog-titlebar-close ui-corner-all':true}\" tabindex=\"0\" role=\"button\" (click)=\"close($event)\" (keydown.enter)=\"close($event)\">\n                            <span class=\"pi pi-times\"></span>\n                        </a>\n                    </div>\n                </div>\n                <div #content class=\"ui-dialog-content ui-widget-content\">\n                    <i [ngClass]=\"'ui-confirmdialog-icon'\" [class]=\"icon\" *ngIf=\"icon\"></i>\n                    <span class=\"ui-confirmdialog-message\" [innerHTML]=\"message\"></span>\n                </div>\n                <div class=\"ui-dialog-footer ui-widget-content\" *ngIf=\"footer\">\n                    <ng-content select=\"p-footer\"></ng-content>\n                </div>\n                <div class=\"ui-dialog-footer ui-widget-content\" *ngIf=\"!footer\">\n                    <button type=\"button\" pButton [icon]=\"acceptIcon\" [label]=\"acceptLabel\" (click)=\"accept()\" [class]=\"acceptButtonStyleClass\" *ngIf=\"acceptVisible\"></button>\n                    <button type=\"button\" pButton [icon]=\"rejectIcon\" [label]=\"rejectLabel\" (click)=\"reject()\" [class]=\"rejectButtonStyleClass\" *ngIf=\"rejectVisible\"></button>\n                </div>\n            </div>\n        </div>\n    `,\n        animations: [\n            trigger('animation', [\n                state('void', style({\n                    transform: 'scale(0.7)',\n                    opacity: 0\n                })),\n                state('visible', style({\n                    transform: 'none',\n                    opacity: 1\n                })),\n                transition('* => *', animate('{{transitionParams}}'))\n            ])\n        ]\n    })\n], ConfirmDialog);\nlet ConfirmDialogModule = class ConfirmDialogModule {\n};\nConfirmDialogModule = __decorate([\n    NgModule({\n        imports: [CommonModule, ButtonModule],\n        exports: [ConfirmDialog, ButtonModule, SharedModule],\n        declarations: [ConfirmDialog]\n    })\n], ConfirmDialogModule);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ConfirmDialog, ConfirmDialogModule };\n"]}