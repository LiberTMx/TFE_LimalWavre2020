{"version":3,"sources":["C:/wamp64/www/wawaMax/node_modules/primeng/fesm2015/primeng-accordion.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;eAyFE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2BA6ByB,AA0CxB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2EAmDD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6CA+B2C,AAU/B;;;;;EAEZ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0BAOkB","file":"primeng-accordion.js","sourcesContent":["import { EventEmitter, Inject, forwardRef, ChangeDetectorRef, Input, Output, ContentChildren, Component, ElementRef, NgModule } from '@angular/core';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { CommonModule } from '@angular/common';\nimport { Header, PrimeTemplate, SharedModule } from 'primeng/api';\n\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nlet idx = 0;\nlet AccordionTab = class AccordionTab {\n    constructor(accordion, changeDetector) {\n        this.changeDetector = changeDetector;\n        this.cache = true;\n        this.selectedChange = new EventEmitter();\n        this.transitionOptions = '400ms cubic-bezier(0.86, 0, 0.07, 1)';\n        this.id = `ui-accordiontab-${idx++}`;\n        this.accordion = accordion;\n    }\n    get animating() {\n        return this._animating;\n    }\n    set animating(val) {\n        this._animating = val;\n        if (!this.changeDetector.destroyed) {\n            this.changeDetector.detectChanges();\n        }\n    }\n    ngAfterContentInit() {\n        this.templates.forEach((item) => {\n            switch (item.getType()) {\n                case 'content':\n                    this.contentTemplate = item.template;\n                    break;\n                default:\n                    this.contentTemplate = item.template;\n                    break;\n            }\n        });\n    }\n    toggle(event) {\n        if (this.disabled || this.animating) {\n            return false;\n        }\n        this.animating = true;\n        let index = this.findTabIndex();\n        if (this.selected) {\n            this.selected = false;\n            this.accordion.onClose.emit({ originalEvent: event, index: index });\n        }\n        else {\n            if (!this.accordion.multiple) {\n                for (var i = 0; i < this.accordion.tabs.length; i++) {\n                    this.accordion.tabs[i].selected = false;\n                    this.accordion.tabs[i].selectedChange.emit(false);\n                }\n            }\n            this.selected = true;\n            this.loaded = true;\n            this.accordion.onOpen.emit({ originalEvent: event, index: index });\n        }\n        this.selectedChange.emit(this.selected);\n        event.preventDefault();\n    }\n    findTabIndex() {\n        let index = -1;\n        for (var i = 0; i < this.accordion.tabs.length; i++) {\n            if (this.accordion.tabs[i] == this) {\n                index = i;\n                break;\n            }\n        }\n        return index;\n    }\n    get hasHeaderFacet() {\n        return this.headerFacet && this.headerFacet.length > 0;\n    }\n    onToggleDone(event) {\n        this.animating = false;\n    }\n    onKeydown(event) {\n        if (event.which === 32 || event.which === 13) {\n            this.toggle(event);\n            event.preventDefault();\n        }\n    }\n    ngOnDestroy() {\n        this.accordion.tabs.splice(this.findTabIndex(), 1);\n    }\n};\nAccordionTab.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [forwardRef(() => Accordion),] }] },\n    { type: ChangeDetectorRef }\n];\n__decorate([\n    Input()\n], AccordionTab.prototype, \"header\", void 0);\n__decorate([\n    Input()\n], AccordionTab.prototype, \"selected\", void 0);\n__decorate([\n    Input()\n], AccordionTab.prototype, \"disabled\", void 0);\n__decorate([\n    Input()\n], AccordionTab.prototype, \"cache\", void 0);\n__decorate([\n    Output()\n], AccordionTab.prototype, \"selectedChange\", void 0);\n__decorate([\n    Input()\n], AccordionTab.prototype, \"transitionOptions\", void 0);\n__decorate([\n    ContentChildren(Header)\n], AccordionTab.prototype, \"headerFacet\", void 0);\n__decorate([\n    ContentChildren(PrimeTemplate)\n], AccordionTab.prototype, \"templates\", void 0);\nAccordionTab = __decorate([\n    Component({\n        selector: 'p-accordionTab',\n        template: `\n        <div class=\"ui-accordion-header ui-state-default ui-corner-all\" [ngClass]=\"{'ui-state-active': selected,'ui-state-disabled':disabled}\">\n            <a [attr.tabindex]=\"disabled ? -1 : 0\" [attr.id]=\"id\" [attr.aria-controls]=\"id + '-content'\" role=\"tab\" [attr.aria-expanded]=\"selected\" (click)=\"toggle($event)\" \n                (keydown)=\"onKeydown($event)\">\n                <span class=\"ui-accordion-toggle-icon\" [ngClass]=\"selected ? accordion.collapseIcon : accordion.expandIcon\"></span>\n                <span class=\"ui-accordion-header-text\" *ngIf=\"!hasHeaderFacet\">\n                    {{header}}\n                </span>\n                <ng-content select=\"p-header\" *ngIf=\"hasHeaderFacet\"></ng-content>\n            </a>\n        </div>\n        <div [attr.id]=\"id + '-content'\" class=\"ui-accordion-content-wrapper\" [@tabContent]=\"selected ? {value: 'visible', params: {transitionParams: animating ? transitionOptions : '0ms', height: '*'}} : {value: 'hidden', params: {transitionParams: transitionOptions, height: '0'}}\" (@tabContent.done)=\"onToggleDone($event)\"\n            [ngClass]=\"{'ui-accordion-content-wrapper-overflown': !selected||animating}\" \n            role=\"region\" [attr.aria-hidden]=\"!selected\" [attr.aria-labelledby]=\"id\">\n            <div class=\"ui-accordion-content ui-widget-content\">\n                <ng-content></ng-content>\n                <ng-container *ngIf=\"contentTemplate && (cache ? loaded : selected)\">\n                    <ng-container *ngTemplateOutlet=\"contentTemplate\"></ng-container>\n                </ng-container>\n            </div>\n        </div>\n    `,\n        animations: [\n            trigger('tabContent', [\n                state('hidden', style({\n                    height: '0'\n                })),\n                state('void', style({\n                    height: '{{height}}'\n                }), { params: { height: '0' } }),\n                state('visible', style({\n                    height: '*'\n                })),\n                transition('visible <=> hidden', animate('{{transitionParams}}')),\n                transition('void => hidden', animate('{{transitionParams}}')),\n                transition('void => visible', animate('{{transitionParams}}'))\n            ])\n        ]\n    }),\n    __param(0, Inject(forwardRef(() => Accordion)))\n], AccordionTab);\nlet Accordion = class Accordion {\n    constructor(el, changeDetector) {\n        this.el = el;\n        this.changeDetector = changeDetector;\n        this.onClose = new EventEmitter();\n        this.onOpen = new EventEmitter();\n        this.expandIcon = 'pi pi-fw pi-chevron-right';\n        this.collapseIcon = 'pi pi-fw pi-chevron-down';\n        this.tabs = [];\n    }\n    ngAfterContentInit() {\n        this.initTabs();\n        this.tabListSubscription = this.tabList.changes.subscribe(_ => {\n            this.initTabs();\n            this.changeDetector.markForCheck();\n        });\n    }\n    initTabs() {\n        this.tabs = this.tabList.toArray();\n        this.updateSelectionState();\n    }\n    getBlockableElement() {\n        return this.el.nativeElement.children[0];\n    }\n    get activeIndex() {\n        return this._activeIndex;\n    }\n    set activeIndex(val) {\n        this._activeIndex = val;\n        this.updateSelectionState();\n    }\n    updateSelectionState() {\n        if (this.tabs && this.tabs.length && this._activeIndex != null) {\n            for (let i = 0; i < this.tabs.length; i++) {\n                let selected = this.multiple ? this._activeIndex.includes(i) : (i === this._activeIndex);\n                let changed = selected !== this.tabs[i].selected;\n                if (changed) {\n                    this.tabs[i].animating = true;\n                    this.tabs[i].selected = selected;\n                    this.tabs[i].selectedChange.emit(selected);\n                }\n            }\n        }\n    }\n    ngOnDestroy() {\n        if (this.tabListSubscription) {\n            this.tabListSubscription.unsubscribe();\n        }\n    }\n};\nAccordion.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ChangeDetectorRef }\n];\n__decorate([\n    Input()\n], Accordion.prototype, \"multiple\", void 0);\n__decorate([\n    Output()\n], Accordion.prototype, \"onClose\", void 0);\n__decorate([\n    Output()\n], Accordion.prototype, \"onOpen\", void 0);\n__decorate([\n    Input()\n], Accordion.prototype, \"style\", void 0);\n__decorate([\n    Input()\n], Accordion.prototype, \"styleClass\", void 0);\n__decorate([\n    Input()\n], Accordion.prototype, \"expandIcon\", void 0);\n__decorate([\n    Input()\n], Accordion.prototype, \"collapseIcon\", void 0);\n__decorate([\n    ContentChildren(AccordionTab)\n], Accordion.prototype, \"tabList\", void 0);\n__decorate([\n    Input()\n], Accordion.prototype, \"activeIndex\", null);\nAccordion = __decorate([\n    Component({\n        selector: 'p-accordion',\n        template: `\n        <div [ngClass]=\"'ui-accordion ui-widget ui-helper-reset'\" [ngStyle]=\"style\" [class]=\"styleClass\" role=\"tablist\">\n            <ng-content></ng-content>\n        </div>\n    `\n    })\n], Accordion);\nlet AccordionModule = class AccordionModule {\n};\nAccordionModule = __decorate([\n    NgModule({\n        imports: [CommonModule],\n        exports: [Accordion, AccordionTab, SharedModule],\n        declarations: [Accordion, AccordionTab]\n    })\n], AccordionModule);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Accordion, AccordionModule, AccordionTab };\n"]}