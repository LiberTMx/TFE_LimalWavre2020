{"version":3,"sources":["C:/wamp64/www/wawaMax/node_modules/primeng/fesm2015/primeng-splitbutton.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;eA4HE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qDA4DmD,AA8CrC;;;;;EAEd;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0BAOoB","file":"primeng-splitbutton.js","sourcesContent":["import { EventEmitter, ElementRef, Renderer2, ChangeDetectorRef, Input, Output, ViewChild, Component, NgModule } from '@angular/core';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { CommonModule } from '@angular/common';\nimport { DomHandler } from 'primeng/dom';\nimport { ButtonModule } from 'primeng/button';\nimport { Router, RouterModule } from '@angular/router';\nimport { UniqueComponentId } from 'primeng/utils';\n\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nlet SplitButton = class SplitButton {\n    constructor(el, renderer, router, cd) {\n        this.el = el;\n        this.renderer = renderer;\n        this.router = router;\n        this.cd = cd;\n        this.iconPos = 'left';\n        this.onClick = new EventEmitter();\n        this.onDropdownClick = new EventEmitter();\n        this.showTransitionOptions = '225ms ease-out';\n        this.hideTransitionOptions = '195ms ease-in';\n        this.overlayVisible = false;\n        this.ariaId = UniqueComponentId() + '_list';\n    }\n    onDefaultButtonClick(event) {\n        this.onClick.emit(event);\n    }\n    itemClick(event, item) {\n        if (item.disabled) {\n            event.preventDefault();\n            return;\n        }\n        if (!item.url) {\n            event.preventDefault();\n        }\n        if (item.command) {\n            item.command({\n                originalEvent: event,\n                item: item\n            });\n        }\n        this.overlayVisible = false;\n    }\n    show() {\n        this.overlayVisible = !this.overlayVisible;\n    }\n    onOverlayAnimationStart(event) {\n        switch (event.toState) {\n            case 'visible':\n                this.overlay = event.element;\n                this.appendOverlay();\n                this.overlay.style.zIndex = String(++DomHandler.zindex);\n                this.alignOverlay();\n                this.bindDocumentClickListener();\n                this.bindDocumentResizeListener();\n                break;\n            case 'void':\n                this.onOverlayHide();\n                break;\n        }\n    }\n    onDropdownButtonClick(event) {\n        this.onDropdownClick.emit(event);\n        this.dropdownClick = true;\n        this.show();\n    }\n    alignOverlay() {\n        if (this.appendTo)\n            DomHandler.absolutePosition(this.overlay, this.containerViewChild.nativeElement);\n        else\n            DomHandler.relativePosition(this.overlay, this.containerViewChild.nativeElement);\n    }\n    appendOverlay() {\n        if (this.appendTo) {\n            if (this.appendTo === 'body')\n                document.body.appendChild(this.overlay);\n            else\n                DomHandler.appendChild(this.overlay, this.appendTo);\n            this.overlay.style.minWidth = DomHandler.getWidth(this.el.nativeElement.children[0]) + 'px';\n        }\n    }\n    restoreOverlayAppend() {\n        if (this.overlay && this.appendTo) {\n            this.el.nativeElement.appendChild(this.overlay);\n        }\n    }\n    bindDocumentClickListener() {\n        if (!this.documentClickListener) {\n            this.documentClickListener = this.renderer.listen('document', 'click', () => {\n                if (this.dropdownClick) {\n                    this.dropdownClick = false;\n                }\n                else {\n                    this.overlayVisible = false;\n                    this.unbindDocumentClickListener();\n                    this.cd.markForCheck();\n                }\n            });\n        }\n    }\n    unbindDocumentClickListener() {\n        if (this.documentClickListener) {\n            this.documentClickListener();\n            this.documentClickListener = null;\n        }\n    }\n    bindDocumentResizeListener() {\n        this.documentResizeListener = this.onWindowResize.bind(this);\n        window.addEventListener('resize', this.documentResizeListener);\n    }\n    unbindDocumentResizeListener() {\n        if (this.documentResizeListener) {\n            window.removeEventListener('resize', this.documentResizeListener);\n            this.documentResizeListener = null;\n        }\n    }\n    onWindowResize() {\n        this.overlayVisible = false;\n    }\n    onOverlayHide() {\n        this.unbindDocumentClickListener();\n        this.unbindDocumentResizeListener();\n        this.overlay = null;\n    }\n    ngOnDestroy() {\n        this.restoreOverlayAppend();\n        this.onOverlayHide();\n    }\n};\nSplitButton.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Renderer2 },\n    { type: Router },\n    { type: ChangeDetectorRef }\n];\n__decorate([\n    Input()\n], SplitButton.prototype, \"model\", void 0);\n__decorate([\n    Input()\n], SplitButton.prototype, \"icon\", void 0);\n__decorate([\n    Input()\n], SplitButton.prototype, \"iconPos\", void 0);\n__decorate([\n    Input()\n], SplitButton.prototype, \"label\", void 0);\n__decorate([\n    Output()\n], SplitButton.prototype, \"onClick\", void 0);\n__decorate([\n    Output()\n], SplitButton.prototype, \"onDropdownClick\", void 0);\n__decorate([\n    Input()\n], SplitButton.prototype, \"style\", void 0);\n__decorate([\n    Input()\n], SplitButton.prototype, \"styleClass\", void 0);\n__decorate([\n    Input()\n], SplitButton.prototype, \"menuStyle\", void 0);\n__decorate([\n    Input()\n], SplitButton.prototype, \"menuStyleClass\", void 0);\n__decorate([\n    Input()\n], SplitButton.prototype, \"disabled\", void 0);\n__decorate([\n    Input()\n], SplitButton.prototype, \"tabindex\", void 0);\n__decorate([\n    Input()\n], SplitButton.prototype, \"appendTo\", void 0);\n__decorate([\n    Input()\n], SplitButton.prototype, \"dir\", void 0);\n__decorate([\n    Input()\n], SplitButton.prototype, \"showTransitionOptions\", void 0);\n__decorate([\n    Input()\n], SplitButton.prototype, \"hideTransitionOptions\", void 0);\n__decorate([\n    ViewChild('container', { static: true })\n], SplitButton.prototype, \"containerViewChild\", void 0);\n__decorate([\n    ViewChild('defaultbtn', { static: true })\n], SplitButton.prototype, \"buttonViewChild\", void 0);\nSplitButton = __decorate([\n    Component({\n        selector: 'p-splitButton',\n        template: `\n        <div #container [ngClass]=\"{'ui-splitbutton ui-buttonset ui-widget':true,'ui-state-disabled':disabled}\" [ngStyle]=\"style\" [class]=\"styleClass\">\n            <button #defaultbtn type=\"button\" pButton [icon]=\"icon\" [iconPos]=\"iconPos\" [label]=\"label\" [cornerStyleClass]=\"dir === 'rtl' ? 'ui-corner-right': 'ui-corner-left'\" (click)=\"onDefaultButtonClick($event)\" [disabled]=\"disabled\" [attr.tabindex]=\"tabindex\">\n            </button><button type=\"button\" pButton class=\"ui-splitbutton-menubutton\" icon=\"pi pi-chevron-down\" [cornerStyleClass]=\"dir === 'rtl' ? 'ui-corner-left': 'ui-corner-right'\" (click)=\"onDropdownButtonClick($event)\" [disabled]=\"disabled\"></button>\n            <div [attr.id]=\"ariaId + '_overlay'\" #overlay [ngClass]=\"'ui-menu ui-menu-dynamic ui-widget ui-widget-content ui-corner-all ui-helper-clearfix ui-shadow'\" *ngIf=\"overlayVisible\"\n                    [ngStyle]=\"menuStyle\" [class]=\"menuStyleClass\"\n                    [@overlayAnimation]=\"{value: 'visible', params: {showTransitionParams: showTransitionOptions, hideTransitionParams: hideTransitionOptions}}\" (@overlayAnimation.start)=\"onOverlayAnimationStart($event)\">\n                <ul class=\"ui-menu-list ui-helper-reset\" role=\"menu\">\n                    <ng-template ngFor let-item [ngForOf]=\"model\">\n                        <li *ngIf=\"item.separator\" class=\"ui-menu-separator ui-widget-content\" [ngClass]=\"{'ui-helper-hidden': item.visible === false}\" role=\"separator\">\n                        <li class=\"ui-menuitem ui-widget ui-corner-all\" role=\"menuitem\" *ngIf=\"item.visible !== false && !item.separator\" role=\"none\">\n                            <a *ngIf=\"!item.routerLink\" [attr.href]=\"item.url\" class=\"ui-menuitem-link ui-corner-all\" [attr.target]=\"item.target\" role=\"menuitem\"\n                                [ngClass]=\"{'ui-state-disabled':item.disabled}\" (click)=\"itemClick($event, item)\">\n                                <span [ngClass]=\"'ui-menuitem-icon'\" [class]=\"item.icon\" *ngIf=\"item.icon\"></span>\n                                <span class=\"ui-menuitem-text\">{{item.label}}</span>\n                            </a>\n                            <a *ngIf=\"item.routerLink\" [routerLink]=\"item.routerLink\" [queryParams]=\"item.queryParams\"\n                                class=\"ui-menuitem-link ui-corner-all\" [attr.target]=\"item.target\" [ngClass]=\"{'ui-state-disabled':item.disabled}\" (click)=\"itemClick($event, item)\">\n                                <span [ngClass]=\"'ui-menuitem-icon'\" [class]=\"item.icon\" *ngIf=\"item.icon\"></span>\n                                <span class=\"ui-menuitem-text\">{{item.label}}</span>\n                            </a>\n                        </li>\n                    </ng-template>\n                </ul>\n            </div>\n        </div>\n    `,\n        animations: [\n            trigger('overlayAnimation', [\n                state('void', style({\n                    transform: 'translateY(5%)',\n                    opacity: 0\n                })),\n                state('visible', style({\n                    transform: 'translateY(0)',\n                    opacity: 1\n                })),\n                transition('void => visible', animate('{{showTransitionParams}}')),\n                transition('visible => void', animate('{{hideTransitionParams}}'))\n            ])\n        ]\n    })\n], SplitButton);\nlet SplitButtonModule = class SplitButtonModule {\n};\nSplitButtonModule = __decorate([\n    NgModule({\n        imports: [CommonModule, ButtonModule, RouterModule],\n        exports: [SplitButton, ButtonModule, RouterModule],\n        declarations: [SplitButton]\n    })\n], SplitButtonModule);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { SplitButton, SplitButtonModule };\n"]}